#+STARTUP: showall hidestars

* Links
** [[http://cestlaz.github.io][Here's my Blog]]* display
** [[https://github.com/zamansky/using-emacs][github]]
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode 1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)
#+END_SRC
* shortcuts
 #+BEGIN_SRC  emacs-lisp
   (setq make-backup-file nil)
   (setq auto-save-default nil)
   (defalias 'yes-or-no-p 'y-or-n-p)
   (setq scroll-conservatively 100)
   (setq ring-bell-function 'ignore)
   (when window-system (global-hl-line-mode t))
   (when window-system (global-prettify-symbols-mode t)) 
 #+END_SRC
* bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Time format
#+BEGIN_SRC  emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC
* Enabling the mode

This turns on the clock globally.
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

* Battery indicator
A package called fancy-battery will be used if we are in GUI emacs, otherwise the built in battery-mode will be used. Fancy battery has very odd colors if used in the tty, hence us disabling it.
#+BEGIN_SRC emacs-lisp

(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))
#+END_SRC
* packages
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))

(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere  t)
(ido-mode 1)
#+END_SRC
** ido-vertical
#+BEGIN_SRC  emacs-lisp
(use-package ido-vertical-mode
   :ensure t
   :init
   (ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC  emacs-lisp
(use-package smex
   :ensure t
   :init (smex-initialize)
   :bind
   ("M-x" . smex))
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd  "C-x b") 'ido-switch-buffer)
#+END_SRC
* buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** expert
#+BEGIN_SRC  emacs-lisp
(setq ibuffer-expert t)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit/reload
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ( )
    (interactive)
    (org-babel-load-file (expand-file-name "~/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ( )
    (interactive)
    (find-file "~/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
* window movement ^x-o
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init
(progn
(global-set-key [remap other-window] 'ace-window)
(custom-set-faces
'(aw-leading-char-face
((t (:inherit ace-jump-face-foreground :height 3,0)))))
))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package counsel
:ensure t
)
(use-package ivy
:ensure t
:diminish (ivy-mode)
:bind (("C-x b" . ivy-switch-buffer))
:config
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
               ("C-r" . swiper)
               ("C-c C-r" . ivy-resume)
               ("M-x" . counsel-M-x)
               ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expresson-history)
))
#+END_SRC
