* display
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t)
#+END_SRC
* shortcuts
 #+BEGIN_SRC  emacs-lisp
   (setq make-backup-file nil)
   (setq auto-save-default nil)
   (defalias 'yes-or-no-p 'y-or-n-p)
   (setq scroll-conservatively 100)
   (setq ring-bell-function 'ignore)
   (when window-system (global-hl-line-mode t))
   (when window-system (global-prettify-symbols-mode t)) 
 #+END_SRC
* bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Time format
#+BEGIN_SRC  emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC
* Enabling the mode

This turns on the clock globally.
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

* Battery indicator
A package called fancy-battery will be used if we are in GUI emacs, otherwise the built in battery-mode will be used. Fancy battery has very odd colors if used in the tty, hence us disabling it.
#+BEGIN_SRC emacs-lisp

(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))
#+END_SRC
* packages
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))

(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

* IDO c-x c-b
** enable ido mode
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching nil)
(setq ido-create-new-buffer 'always)
(setq ido-everywhere  t)
(ido-mode 1)
#+END_SRC
** ido-vertical
#+BEGIN_SRC  emacs-lisp
(use-package ido-vertical-mode
   :ensure t
   :init
   (ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex
#+BEGIN_SRC  emacs-lisp
(use-package smex
   :ensure t
   :init (smex-initialize)
   :bind
   ("M-x" . smex))
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd  "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* buffers c-x b
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** expert
#+BEGIN_SRC  emacs-lisp
(setq ibuffer-expert t)
#+END_SRC
* avy Alt-s
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit/reload C-c e and C-c r
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ( )
    (interactive)
    (org-babel-load-file (expand-file-name "~/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ( )
    (interactive)
    (find-file "~/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
* switch-window C-x o
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
* window splitting function c-x 2 and c-x 3
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ( )
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ( )
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
